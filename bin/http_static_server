#!/usr/bin/env ruby

DEBUG_MODE = false

require "bundler/setup"
require "mini_node"
require "http/parser"
require 'mime/types'

reactor = MiniNode::Reactor.new

server = reactor.listen("0.0.0.0", 4000)

# server.on(:accept) do |client|
#   parser = Http::Parser.new
#
#   parser.on_message_complete = proc do |env|
#     puts '------------'
#     puts [parser.http_method, parser.request_url, parser.headers].inspect
#     puts '------------'
#
#     begin
#       content = IO.binread(File.join('public', parser.request_url))
#     rescue Errno::ENOENT
#     end
#
#     if content
#       mime_type = MIME::Types.of(parser.request_url).first
#
#       content_type = mime_type.content_type
#       media_type = 'charset=UTF-8' if mime_type.media_type.downcase == 'text'
#
#       client.write("HTTP/1.1 200 OK\r\n")
#       client.write("Content-Type: #{content_type};#{media_type}\r\n")
#       client.write("Content-Length: #{content.size}\r\n")
#       client.write("\r\n")
#       client.write(content) if parser.http_method != 'HEAD'
#     else
#       client.write("HTTP/1.1 404 Not Found\r\n")
#       client.write("Content-Length: 0\r\n")
#     end
#
#     client.close
#   end
#
#   client.on(:data) do |data|
#     parser << data
#   end
# end
#
# reactor.start

# server.on(:accept) do |client|
#   parser = Http::Parser.new
#
#   parser.on_message_complete = proc do |env|
#     if DEBUG_MODE
#       puts '------------'
#       puts [parser.http_method, parser.request_url, parser.headers].inspect
#       puts '------------'
#     end
#
#     begin
#       file_stream = reactor.add_io(File.open(File.join('public', parser.request_url), 'r'))
#
#       content = ''
#       file_stream.on(:data) do |data|
#         content << data
#       end
#
#       file_stream.on(:close) do
#         puts ">>> `file_stream.on(:close)` callback called" if DEBUG_MODE
#
#         mime_type = MIME::Types.of(parser.request_url).first
#
#         content_type = mime_type.content_type
#         media_type = 'charset=UTF-8' if mime_type.media_type.downcase == 'text'
#
#         client.write("HTTP/1.1 200 OK\r\n")
#         client.write("Content-Type: #{content_type};#{media_type}\r\n")
#         client.write("Content-Length: #{content.size}\r\n")
#         client.write("\r\n")
#         client.write(content) if parser.http_method != 'HEAD'
#         client.close
#       end
#     rescue Errno::ENOENT
#       client.write("HTTP/1.1 404 Not Found\r\n")
#       client.write("Content-Length: 0\r\n")
#       client.close
#     end
#   end
#
#   client.on(:data) do |data|
#     parser << data
#   end
# end
#
# reactor.start

server.on(:accept) do |client|
  parser = Http::Parser.new

  parser.on_message_complete = proc do |env|
    if DEBUG_MODE
      puts '------------'
      puts [parser.http_method, parser.request_url, parser.headers].inspect
      puts '------------'
    end

    begin
      file = File.open(File.join('public', parser.request_url), 'r')

      mime_type = MIME::Types.of(file.path).first

      content_type = mime_type.content_type
      media_type = 'charset=UTF-8' if mime_type.media_type.downcase == 'text'

      client.write("HTTP/1.1 200 OK\r\n")
      client.write("Content-Type: #{content_type};#{media_type}\r\n")
      client.write("Content-Length: #{file.size}\r\n")
      client.write("\r\n")

      if parser.http_method == 'HEAD'
        file.close
        client.close
      else
        file_stream = reactor.add_io(file)

        file_stream.pipe_to(client)

        file_stream.on(:close) do
          client.close
        end
      end
    rescue Errno::ENOENT
      client.write("HTTP/1.1 404 Not Found\r\n")
      client.write("Content-Length: 0\r\n")
      client.close
    end
  end

  client.on(:data) do |data|
    parser << data
  end
end

reactor.start

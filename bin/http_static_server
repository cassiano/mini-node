#!/usr/bin/env ruby

DEBUG_MODE = false

require 'mini_node/http_server'
require 'mime/types'

http_server = MiniNode::HttpServer.new('0.0.0.0', 4000)

# max_stream_count = 0
# http_server.reactor.on(:next_tick) do
#   stream_count = http_server.reactor.stream_count
#   max_stream_count = stream_count if stream_count > max_stream_count
#
#   puts "Stream count: #{stream_count}; Max stream count: #{max_stream_count}"
# end

http_server.start do |request, response|
  if DEBUG_MODE
    puts '------------'
    puts [request.verb, request.url, request.headers].inspect
    puts '------------'
  end

  unless request.get? || request.head?
    response.status_code = :method_not_allowed
    response.finish

    next
  end

  begin
    file = File.open(File.join('public', request.url), 'r')

    if (mime_type = MIME::Types.of(file.path).first)
      content_type          = mime_type.content_type
      response_content_type = content_type

      response_content_type += ';charset=UTF-8' if mime_type.media_type.downcase == 'text'
    end

    if request.if_modified_since && file.mtime <= request.if_modified_since
      response.status_code   = :not_modified
      response.content_type  = response_content_type if response_content_type
      response.last_modified = file.mtime
      response.finish

      file.close

      next
    end

    response.status_code    = :ok
    response.content_type   = response_content_type if response_content_type
    response.content_length = file.size
    response.last_modified  = file.mtime

    if request.head?
      response.finish
      file.close

      next
    end

    response.mark_start_of_body

    file_stream = http_server.reactor.add_stream(file, true)

    file_stream.pipe_to response

    file_stream.on(:close) do
      response.finish
    end
  rescue Errno::ENOENT
    response.status_code    = :not_found
    response.content_length = 0
    response.finish
  end
end

#!/usr/bin/env ruby

DEBUG_MODE               = false
ENABLE_FS_CACHING        = true
FS_CACHING_MAX_FILE_SIZE = 1024 ** 2

require 'mini_node/http_server'
require 'mime/types'
require 'listen' if ENABLE_FS_CACHING

http_server = MiniNode::HttpServer.new('0.0.0.0', 4000)

fs_cache = {}

# max_stream_count = 0
# http_server.reactor.on :next_tick do
#   stream_count = http_server.reactor.stream_count
#   max_stream_count = stream_count if stream_count > max_stream_count
#
#   puts "Stream count: #{stream_count}; Max stream count: #{max_stream_count}"
# end

if ENABLE_FS_CACHING
  listener = Listen.to('public') do |modified, added, removed|
    (modified + removed).each do |path|
      url, _ = fs_cache.find do |(_, cached_data)|
        path.end_with? cached_data[:path]
      end

      if url
        puts "Expiring #{url}..."

        fs_cache.delete url
      end
    end
  end

  listener.start
end

http_server.start do |request, response|
  unless request.get? || request.head?
    response.set_head :method_not_allowed
    response.finish

    next
  end

  begin
    if ENABLE_FS_CACHING
      if (cached_file = fs_cache[request.url]) && !(request.get? && !cached_file[:content])
        cached_file[:access_count] += 1

        puts ">>> Reading #{request.url} from cache (count = #{cached_file[:access_count]})..."

        if request.if_modified_since && cached_file[:mtime] <= request.if_modified_since
          response.set_head :not_modified, [
            ['Content-Type',  cached_file[:content_type]],
            ['Last-Modified', cached_file[:mtime].httpdate]
          ]

          response.finish

          next
        end

        response.set_head :ok, [
          ['Content-Type',    cached_file[:content_type]],
          ['Content-Length',  cached_file[:size]],
          ['Last-Modified',   cached_file[:mtime].httpdate]
        ]


        response.write(cached_file[:content]) if request.get?
        response.finish

        next
      end
    end

    file = File.open(File.join('public', request.url), 'r')

    if (mime_type = MIME::Types.of(file.path).first)
      content_type          = mime_type.content_type
      response_content_type = content_type

      if ['text', 'application'].include?(mime_type.media_type.downcase)
        response_content_type += ";charset=#{file.external_encoding.name}"
      end
    end

    if ENABLE_FS_CACHING
      if file.size <= FS_CACHING_MAX_FILE_SIZE
        puts ">>> Caching #{request.url} metadata..."

        fs_cache[request.url] = {
          path: file.path,
          content_type: response_content_type,
          size: file.size,
          mtime: file.mtime,
          access_count: 0
        }
      end
    end

    if request.if_modified_since && file.mtime <= request.if_modified_since
      response.set_head :not_modified, [
        ['Content-Type',  response_content_type],
        ['Last-Modified', file.mtime.httpdate]
      ]

      response.finish
      file.close

      next
    end

    response.set_head :ok, [
      ['Content-Type',    response_content_type],
      ['Content-Length',  file.size],
      ['Last-Modified',   file.mtime.httpdate]
    ]

    if request.head?
      response.finish
      file.close

      next
    end

    file_stream = http_server.reactor.add_stream(file, true)

    # Pipe `file_stream` to `response`.
    file_stream | response

    file_stream.on :close do
      if ENABLE_FS_CACHING
        puts ">>> Caching #{request.url} content..."

        fs_cache[request.url][:content] = response.body if fs_cache[request.url]
      end

      response.finish
    end
  rescue Errno::ENOENT
    response.set_head :not_found, [
      ['Content-Length', 0]
    ]

    response.finish
  end
end
